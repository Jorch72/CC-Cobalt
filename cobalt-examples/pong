--Pong, a Cobalt POC--

cobalt = dofile( "cobalt" )

local paddlesize = 6
cobalt.updatespeed = 0.05

p1 = {
	x = 1,
	y = 1,
	score = 0
}

p2 = {
	x = cobalt.window.getWidth(),
	y = 1,
	--y = math.ceil(cobalt.window.getHeight() / 2 - paddlesize/2)
	score = 0
}

state = "Game"
scorer = ""
scorewaittimer = 0

ball = {
	x = math.floor( cobalt.window.getWidth()/2 ),
	y = math.floor( cobalt.window.getHeight()/2),
	xdir = 1,
	ydir = 0.2,
}

function ball.respawn()
	ball.x = math.floor( cobalt.window.getWidth()/2 )
	ball.y = math.floor( cobalt.window.getHeight()/2)
	ball.xdir = 1
	ball.ydir = 0
	p1.y = math.floor(cobalt.window.getHeight()/2-paddlesize/2)
	p2.y = math.floor(cobalt.window.getHeight()/2-paddlesize/2)
	state = "Game"
end

ball.respawn()

function score(player)
	scorewaittimer = 0
	if player == p1 then scorer = "Player 1" else scorer = "Player 2" end
	state = "Score"
	player.score = player.score + 1
end

function cobalt.update( )
	if state == "Game" then
		local iD = cobalt.keyboard.isDown
		if iD( "w" ) then
			if p1.y > 1 then
				p1.y = p1.y - 1
			end
		elseif iD( "s" ) then
			if p1.y + paddlesize < cobalt.window.getHeight() then
				p1.y = p1.y + 1
			end
		end
		if iD("up") then
			if p2.y > 1 then
				p2.y = p2.y - 1
			end
		elseif iD("down") then
			if p2.y + paddlesize < cobalt.window.getHeight() then
				p2.y = p2.y + 1
			end
		end
		ball.x = ball.x + ball.xdir
		ball.y = ball.y + ball.ydir
		if ball.x == p1.x then
			if ball.y >= p1.y and ball.y <= p1.y + paddlesize+1 then
				ball.xdir = ball.xdir * -1

				if ball.y-p1.y > 0 and ball.y-p1.y < math.floor( paddlesize*.3 ) then
					ball.ydir = (ball.ydir*-1) - math.random (0.2, 0.4)
				elseif ball.y-p1.y > math.floor( paddlesize*.3 ) and ball.y-p1.y < math.floor( paddlesize*.6 ) then
					ball.ydir = ball.ydir*-1
				elseif ball.y-p1.y > math.floor( paddlesize*.6 ) then
					ball.ydir = (ball.ydir*-1) + math.random (0.2, 0.4)
				end
			else
				score(p2)
			end
		end
		if ball.x == p2.x then
			if ball.y >= p2.y and ball.y <= p2.y + paddlesize+1 then
				ball.xdir = ball.xdir * -1
				if ball.y-p2.y > 0 and ball.y-p2.y < math.floor( paddlesize*.3 ) then
					ball.ydir = (ball.ydir*-1) - math.random (0.2, 0.4)
				elseif ball.y-p2.y > math.floor( paddlesize*.3 ) and ball.y-p2.y < math.floor( paddlesize*.6 ) then
					ball.ydir = ball.ydir*-1
				elseif ball.y-p2.y > math.floor( paddlesize*.6 ) then
					ball.ydir = (ball.ydir*-1) + math.random (0.2, 0.4)
				end
			else
				score(p1)
			end
		end
		if ball.y < 1 or ball.y > cobalt.window.getHeight() then
			ball.ydir = ball.ydir*-1
		end
	end
	if state == "Score" then
		scorewaittimer = scorewaittimer + 0.1
		if scorewaittimer > 3 then
			ball.respawn()
		end
	end
end

function cobalt.draw()
	if state == "Game" or state == "Score" then
		cobalt.graphics.setColour( colours.grey )
		cobalt.graphics.setBackgroundColour( colours.black )
		for i = 1, cobalt.window.getHeight() do
			cobalt.graphics.write( "|", math.ceil(cobalt.window.getWidth()/2), i )
		end
		cobalt.graphics.write( p1.score, math.ceil(cobalt.window.getWidth()/2)-1, 2)
		cobalt.graphics.write( p2.score, math.ceil(cobalt.window.getWidth()/2)+1, 2)
		cobalt.graphics.line( p1.x, p1.y, p1.x, p1.y + paddlesize, colours.white )
		cobalt.graphics.line( p2.x, p2.y, p2.x, p2.y + paddlesize, colours.white )
		cobalt.graphics.pixel( ball.x, ball.y, colours.white )


	end
	if state == "Score" then

		local x = math.ceil(cobalt.window.getWidth() / 2 - 8)
		local y = math.ceil(cobalt.window.getHeight()/2-3)

		cobalt.graphics.rect( "fill", x, y, 15, 7, colours.grey )
		cobalt.graphics.setColour( colours.white )
		cobalt.graphics.print( scorer .. " scored!", x, y+4 )


	end
end

cobalt.initLoop()
